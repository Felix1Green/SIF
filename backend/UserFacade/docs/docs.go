// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "get": {
                "description": "Check if user is authenticated",
                "summary": "AuthCheck",
                "operationId": "auth-check-id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlersDto.AuthOutDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlerErrors.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlerErrors.Error"
                        }
                    },
                    "503": {
                        "description": ""
                    }
                }
            },
            "post": {
                "description": "authenticate user",
                "summary": "Authenticate",
                "operationId": "authenticate-id",
                "parameters": [
                    {
                        "description": "user credentials",
                        "name": "User_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlerErrors.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlerErrors.Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/handlerErrors.Error"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "description": "log out user",
                "summary": "log out",
                "operationId": "logout-id",
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/handlerErrors.Error"
                        }
                    }
                }
            }
        },
        "/profiles": {
            "get": {
                "description": "Get all profiles of the service",
                "summary": "GetAllProfiles",
                "operationId": "get-all-profiles-id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/profile.ProfileData"
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/handlerErrors.Error"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register user",
                "summary": "Register",
                "operationId": "register-id",
                "parameters": [
                    {
                        "description": "user credentials",
                        "name": "User_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.RegisterUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlerErrors.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlerErrors.Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/handlerErrors.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlerErrors.Error": {
            "type": "object",
            "properties": {
                "errorCode": {
                    "type": "integer"
                },
                "errorMessage": {
                    "type": "string"
                }
            }
        },
        "handlersDto.AuthOutDto": {
            "type": "object",
            "properties": {
                "userID": {
                    "type": "integer"
                },
                "userMail": {
                    "type": "string"
                },
                "userRole": {
                    "type": "string"
                },
                "userSurname": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "profile.ProfileData": {
            "type": "object",
            "properties": {
                "UserID": {
                    "type": "integer"
                },
                "UserMail": {
                    "type": "string"
                },
                "UserName": {
                    "type": "string"
                },
                "UserRole": {
                    "type": "string"
                },
                "UserSurname": {
                    "type": "string"
                }
            }
        },
        "user.RegisterUser": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "userMail": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                },
                "userRole": {
                    "type": "string"
                },
                "userSurname": {
                    "type": "string"
                }
            }
        },
        "user.User": {
            "type": "object",
            "properties": {
                "authToken": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.5",
	Host:        "https://localhost:8080",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "SIF Backend API",
	Description: "This is a backend API",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
